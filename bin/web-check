#!/usr/bin/perl -w

=head1 NAME

web-check - Look for regular expressions in webpages.

=head1 SYNOPSIS

  web-check [options]

  General Options:

   --config    Specify a configuration file, rather than the default.
   --purple    Specify a purple-serve to raise alerts with (optional).
   --verbose   Show the patterns & URLs we're looking for.

  Help Options:

   --help      Show brief help information.
   --manual    Read the manual

=cut

=head1 DESCRIPTION

This script reads a list of URLs and regular expressions from a configuration
file, (C<~/.web-check.conf> by default), and reports on pages that
do, or do not, contain the required pattern.

By default the status will be sent to STDOUT, with more detail available
via the use of the C<--verbose> flag.

If you prefer you can raise/clear alert(s) via the Purple Alert service:

=over 8

=item https://github.com/skx/purple

=back

In that case specify C<--purple=https://alert.example.com/events>, using
the appropriate hostname.

=cut

=head1 CONFIGURAION FILE

The configuration file is assumed to be white-space seperated lines of the form
"url operation pattern".

Here is a simple example - as you can see comments begin with "#" and
are ignored as are blank-lines.

=for example begin

     #
     #  I want to know if the version of node.js updates.
     #
     #  The following line will generate output if the page doesn't
     # contain the given pattern.
     #
     present http://nodejs.org/   v0.8.16

     # Here we raise an alert only if somebody is dead:
     missing https://news.bbc.co.uk  dead

=for example end

=cut


=head1 AUTHOR

 Steve
 --
 http://www.steve.org.uk/

=cut

=head1 LICENSE

Copyright (c) 2009-2016 by Steve Kemp.  All rights reserved.

This module is free software;
you can redistribute it and/or modify it under
the same terms as Perl itself.
The LICENSE file contains the full text of the license.

=cut

use strict;
use warnings;

use JSON;
use Getopt::Long;
use LWP::Simple;
use Pod::Usage;
use Digest::SHA qw(sha1_base64);


#
# The default options.
#
my %CONFIG = ( 'config' => $ENV{ 'HOME' } . "/.web-check.conf" );

#
#  Get the options
#
exit
  if (
       !GetOptions( "help",     \$CONFIG{ 'help' },
                    "manual",   \$CONFIG{ 'manual' },
                    "config=s", \$CONFIG{ 'config' },
                    "purple=s", \$CONFIG{ 'purple' },
                    "verbose",  \$CONFIG{ 'verbose' },
                  ) );

#
# Handle help/manual flags.
#
pod2usage(1) if ( $CONFIG{ 'help' } );
pod2usage( -verbose => 2 ) if ( $CONFIG{ 'manual' } );


#
# Read the configuration file.
#
open( my $file, "<", $CONFIG{ 'config' } ) or
  die "Failed to open $CONFIG{'config'} - $!";

#
# Process each line
#
foreach my $line (<$file>)
{

    #
    # Skip comments and blank lines.
    #
    chomp($line);
    next if ( $line =~ /^#/ || !length($line) );

    #
    #  The parsing.
    #
    if ( $line =~ /^([^ \t]+)([ \t]+)([^ \t]+)([ \t]+)(.*)$/ )
    {
        my $action  = $1;
        my $url     = $3;
        my $pattern = $5;

        #
        # Show what we found.
        #
        $CONFIG{ 'verbose' } &&
          print "Pattern '$pattern' - Action '$action' URL $url\n";

        #
        #  Fetch the URL
        #
        my $content = get($url);
        if ( !defined($content) || !length($content) )
        {
            print "Failed to download the contents of $url\n";
        }

        # The pattern must be present
        if ( $action =~ /present/ )
        {
            if ( $content =~ /$pattern/ )
            {
                clear( $url, $pattern, $action );
            }
            else
            {
                raise( $url, $pattern, $action );
            }
        }
        elsif ( $action =~ /missing/ )
        {
            # The pattern must be missing.
            if ( $content =~ /$pattern/ )
            {
                raise( $url, $pattern, $action );
            }
            else
            {
                clear( $url, $pattern, $action );
            }
        }
        else
        {
            die "Unknown action: $action\n";
        }
    }
}


#
# All done.
#
close($file);
exit(0);




sub raise
{
    my ( $url, $pattern , $action) = (@_);

    #
    #  If we're not using a purple-server then just output
    # the message.
    #
    if ( !$CONFIG{ 'purple' } )
    {
        if ( $action =~ /missing/i ) {
            print "URL $url was not supposed to contain $pattern - but it did\n";
        }
        elsif ( $action =~ /present/i ) {
            print "URL $url was supposed to contain $pattern but it doesn't\n";
        }
        return;
    }

    $CONFIG{ 'verbose' } && print "Raising via $CONFIG{'purple'}\n";

    my %data;

    my $id = sha1_base64($url);
    $data{ 'id' }      = "$url.$id.once";
    $data{ 'raise' }   = "now";
    $data{ 'subject' } = "web-check update";

    if ( $action =~ /missing/i ) {
        $data{ 'detail' } =
          "<p><a href=\"$url\">$url</a> matches the pattern \"<tt>$pattern</tt>\", which it wasn't supposed to.</p>";
    }
    elsif ( $action =~ /present/i ) {

        $data{ 'detail' } =
          "<p><a href=\"$url\">$url</a> no longer matches the pattern \"<tt>$pattern</tt>\"</p>";
    }

    my $json = to_json( \%data );
    send_purple_alert($json);

}




sub clear
{
    my ( $url, $pattern ) = (@_);

    #
    #  If we're not using a purple-server then do nothing.
    #
    return unless $CONFIG{ 'purple' };


    $CONFIG{ 'verbose' } && print "Clearing via $CONFIG{'purple'}\n";

    my %data;

    my $id = sha1_base64($url);
    $data{ 'id' }      = "$url.$id.once";
    $data{ 'raise' }   = "clear";
    $data{ 'subject' } = "URL no longer matches pattern.";
    $data{ 'detail' } =
      "<p><a href=\"$url\">$url</a> no longer matches the pattern \"<tt>$pattern</tt>\"</p>";

    my $json = to_json( \%data );
    send_purple_alert($json);
}




sub send_purple_alert
{
    my ($json) = (@_);


    my $req = HTTP::Request->new( 'POST', $CONFIG{ 'purple' } );

    $req->header( 'Content-Type' => 'application/json' );
    $req->content($json);

    #
    # Now make the request
    #
    my $lwp = LWP::UserAgent->new;
    my $res = $lwp->request($req);


    #
    #  Success?  Then exit.
    #
    if ( $res->is_success() )
    {
        $CONFIG{ 'verbose' } && print "Sent alert\n";

    }
    else
    {

        $CONFIG{ 'verbose' } &&
          print "Failed to send alert: " . $res->status_line() . "\n";
    }

}
