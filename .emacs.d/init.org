#+TITLE:   GNU/Emacs configuration file
#+AUTHOR:  Steve Kemp
#+EMAIL:   steve@steve.fi
#+OPTIONS: num:nil html-postamble:nil

* 1. Emacs Configuration

This file contains the human-readable initialization configuration for emacs.
When emacs launches it will attempt to load an init-file, and it will examine
each of the following files:

1. `~/.emacs`
2. `~/.emacs.el`
3. `~/.emacs.d/init.el`

I've created the file [[~/.emacs.d/init.el]] which will load /this/ file, as well as several others.

** 1.1 Org-Mode Usage Overview

Configuration and control can be best understood by reading the org-mode manual, but in brief:

1. Toggle the display of a particular section via TAB.
2. Toggle the global display of secitons via shift-
3. Export to HTML, LaTeX, or PDF via `C-c C-e`.
4. Follow inline-links via the mouse, or `C-c C-o`.

* 2. Org-Mode Setup

This file is (obviously) written to be processed by 'org-mode', and to make that simpler there are a couple of settings we can tweak.  The most obvious is that we wish to format blocks of source-code with the appropriate font-locking, and also allow them to be indented naturally:

#+BEGIN_SRC emacs-lisp :results output silent
  (setq org-src-tab-acts-natively t)
  (setq org-src-fontify-natively t)
  (setq org-link-search-must-match-exact-headline nil)
#+END_SRC

Although this file doesn't contain any inline-shell blocks those are useful to me generally.  The way these are enabled changed between Emacs versions:

#+BEGIN_SRC emacs-lisp :results output silent
  ;; older versions of org, as used on frodo.home.
  (with-feature (ob-sh)
                (org-babel-do-load-languages 'org-babel-load-languages '((sh . t))))

  ;; modern versions of org, as used elsewhere
  (with-feature (ob-shell)
                (org-babel-do-load-languages 'org-babel-load-languages '((shell . t))))
#+END_SRC

The final org-mode specific helper is to allow (other) org-mode files to evaluate block of code when they're loaded.  This is obviously a security risk if you enable it globally, but I'm making sure that I only execute blocks that contain "my" username which cuts down on risk:


#+BEGIN_SRC emacs-lisp :results output silent
(defun org-eval-skx-startblock ()
  (interactive "*")
  (if (member "skx-startblock" (org-babel-src-block-names))
      (save-excursion
      (save-restriction
        (org-babel-goto-named-src-block "skx-startblock")
        (org-babel-execute-src-block)))
    nil
    )
  )
(add-hook 'org-mode-hook 'org-eval-skx-startblock)
#+END_SRC

To use this define a block such as this in your org-mode file, renaming appropriately:

  #+NAME: skx-startblock-example
  #+BEGIN_SRC emacs-lisp :results output silent
  (message "I like cakes")
  (message "So do you?")
  #+END_SRC

* 3. Easily Updating Emacs Lisp Libraries

The following table contains a list of links to source-code, we fetch the remote URL and save it to the named file.  Emacs does have a concept of a package-registry these days, but a lot of the packages I use aren't contained in that registry.

Instead I need to semi-regularly sync packages from their upstream location.

This is a bit terrible, but also a bit awesome.

#+NAME: github-urls
| Destination                      | Link                                                                             | Result |
|----------------------------------+----------------------------------------------------------------------------------+--------|
| ~/.emacs.d/lang/lua-mode.el      | https://raw.githubusercontent.com/immerrr/lua-mode/master/lua-mode.el            | OK     |
| ~/.emacs.d/lang/markdown-mode.el | https://raw.githubusercontent.com/jrblevin/markdown-mode/master/markdown-mode.el | OK     |
| ~/.emacs.d/lang/monkey.el        | https://raw.githubusercontent.com/skx/monkey/master/emacs/monkey.el              | OK     |
| ~/.emacs.d/lang/puppet-mode.el   | https://raw.githubusercontent.com/voxpupuli/puppet-mode/master/puppet-mode.el    | OK     |
| ~/.emacs.d/lang/web-mode.el      | https://github.com/fxbois/web-mode/raw/master/web-mode.el                        | OK     |
| ~/.emacs.d/lang/cfengine.el      | https://raw.githubusercontent.com/cfengine/core/master/contrib/cfengine.el       | OK     |
#+TBLFM: $3='(download $2 $1)


#+BEGIN_SRC emacs-lisp :results output silent
  (defun download (url dest)
    "Download the given URL and save the contents to the specified destination-file."
    (shell-command-to-string (concat "wget -O " dest " " url))
    "OK")
#+END_SRC
