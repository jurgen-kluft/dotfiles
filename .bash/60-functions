

# ls for Directories.
function lsd
{
    ls -1F $* | grep '/$'
}


#
#  ssh + scp without storing or prompting for keys.
#
function sshtmp
{
    ssh -o "ConnectTimeout 3" \
        -o "StrictHostKeyChecking no" \
        -o "UserKnownHostsFile /dev/null" \
        "$@"
}
function scptmp
{
    exec scp -o "ConnectTimeout 3" \
        -o "StrictHostKeyChecking no" \
        -o "UserKnownHostsFile /dev/null" \
        "$@"
}

#
#  If we have completion function for ssh then use it for those too.
#
if [ "$(type -t _ssh)x" = "functionx" ]; then
    complete -F _ssh sshtmp
    complete -F _ssh scptmp
fi



#
#  Extract named archive(s).
#
x ()
{
    # If we have atool installed then use it.
    if ( which atool 2>/dev/null >/dev/null ) ; then
        atool --extract "$@"
        return
    fi

    for archive in "$@"; do
        case "$archive" in
            *.tar* | *.t?z)
                case $archive in
                    *.gz | *tgz | *.Z)
                        TARFLAGS="--use-compress-prog gzip"
                    ;;
                    *.bz | *.bz2 | *tbz)
                        TARFLAGS="--use-compress-prog bzip2"
                    ;;
                    *)
                        TARFLAGS=""
                    ;;
                esac;
                tar xf "$archive" ${TARFLAGS}
            ;;
            *.zip | *.ZIP)
                unzip -q "$archive"
            ;;
            *.gz | *.GZ)
                gunzip "$archive"
            ;;
            *.deb)
                dpkg-deb -x "$archive" .
            ;;
            *.rar)
                unrar x "$archive"
            ;;
            *.cpio)
                cpio --extract --make-directories --file="$archive"
            ;;
            *.cpio.gz)
                gzip -dc "$archive" | cpio --extract --make-directories
            ;;
            *)
                echo "Unknown archive format" 1>&2
            ;;
        esac;
    done
}


#
#  Create a screen session with the name of the current host, or attach to
# it here and now if it already exists.
#
screeny ()
{
    screen -D -R -S `hostname`
}


#
#  Dump passwords/ MySQL Grants:
#     http://serverfault.com/questions/8860/how-can-i-export-the-privileges-from-mysql-and-then-import-to-a-new-server
#
mysqlgrants()
{
  mysql -B -N $@ -e "SELECT DISTINCT CONCAT(
    'SHOW GRANTS FOR ''', user, '''@''', host, ''';'
    ) AS query FROM mysql.user" | \
  mysql $@ | \
  sed 's/\(GRANT .*\)/\1;/;s/^\(Grants for .*\)/## \1 ##/;/##/{x;p;x;}'
}

#
# Play media found dynamically.  Correctly copes with spaces in files.
#
function play
{
   player=$*
   if [  -z "$player" ]; then
      player="xine --loop=shuffle+"
   fi

   find . -size +1 -type f \( -iname '*.avi' -o -iname '*.mkv' -o -iname '*.m4v' -o -iname '*.wmv' -o -iname '*.flv' -o -iname '*.mp4' -o -iname '*.mov' -o -iname '*.mpg' \) -exec $player "{}" +

}

function pwsafe
{
    if [ -x /usr/bin/pwsafe ]; then
        if [ -e ~/git/passwd ]; then
            /usr/bin/pwsafe --file=$HOME/git/passwd/pwsafe.dat $*
        else
            echo "GIT copy of password database not present"
        fi
    else
        echo "pwsafe doesn't appear to be installed."
    fi
}


# cd back up to the top-level git/hg repo dir
# thanks Dan!
function cds () {
    ORIGINAL_PWD=`pwd`
    while [ ! -d ".git" -a ! -d ".hg" -a `pwd` != "/" ]
    do
        cd ..
    done
    if [  -d ".git" ] ; then
        :
    elif [ -d ".hg" ] ; then
        :
    else
        cd $ORIGINAL_PWD
    fi
}
