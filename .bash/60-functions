
#
#  ssh + scp without storing or prompting for keys.
#
function sshtmp
{
    ssh -o "ConnectTimeout 3" \
        -o "StrictHostKeyChecking no" \
        -o "UserKnownHostsFile /dev/null" \
        "$@"
}
function scptmp
{
    exec scp -o "ConnectTimeout 3" \
        -o "StrictHostKeyChecking no" \
        -o "UserKnownHostsFile /dev/null" \
        "$@"
}

#
#  If we have completion function for ssh then use it for those too.
#
if [ "$(type -t _ssh)x" = "functionx" ]; then
    complete -F _ssh sshtmp
    complete -F _ssh scptmp
fi



function f() { 
	find . -iname "*$1*" "${@:2}" 
}
function r() {
	grep "$1" "${@:2}" -R . 
}
function mkd() {
	echo "Creating $*" && mkdir -p "$@" && cd "$@" 
}
function show_my_ip() {
	dig +short myip.opendns.com @resolver1.opendns.com 
}
function tre() { 
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX; 
}
function trash () { 
	command mv "$@" ~/.Trash ; 
}
function cdfinder() { 
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"; 
}
function digga() { 
	dig +nocmd "$1" any +multiline +noall +answer; 
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$*" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# UTF-8-encode a string of Unicode symbols
function escape() {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless weâ€™re piping the output to another program
	if [ -t 1 ]; then
		echo "";
	fi;
}

#
#  Extract named archive(s).
#
x ()
{
    # If we have atool installed then use it.
    if ( which atool 2>/dev/null >/dev/null ) ; then
        atool --extract "$@"
        return
    fi

    for archive in "$@"; do
        case "$archive" in
            *.tar* | *.t?z)
                case $archive in
                    *.gz | *tgz | *.Z)
                        TARFLAGS="--use-compress-prog gzip"
                    ;;
                    *.bz | *.bz2 | *tbz)
                        TARFLAGS="--use-compress-prog bzip2"
                    ;;
                    *)
                        TARFLAGS=""
                    ;;
                esac;
                tar xf "$archive" ${TARFLAGS}
            ;;
            *.zip | *.ZIP)
                unzip -q "$archive"
            ;;
            *.gz | *.GZ)
                gunzip "$archive"
            ;;
            *.deb)
                dpkg-deb -x "$archive" .
            ;;
            *.rar)
                unrar x "$archive"
            ;;
            *.cpio)
                cpio --extract --make-directories --file="$archive"
            ;;
            *.cpio.gz)
                gzip -dc "$archive" | cpio --extract --make-directories
            ;;
            *)
                echo "Unknown archive format" 1>&2
            ;;
        esac;
    done
}


#
#  Create a screen session with the name of the current host, or attach to
# it here and now if it already exists.
#
screeny ()
{
    screen -D -R -S `hostname`
}


